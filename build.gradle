//file:noinspection GroovyAssignabilityCheck
plugins {
    id("java")
    id("cc.woverflow.loom")
    id("org.jetbrains.kotlin.jvm")
    id("dev.architectury.architectury-pack200")
    id("com.replaymod.preprocess")
    id("maven-publish")
    id("net.kyori.blossom")
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

mcVersion = project.ext.mcVersion
def mcVersionStr = "${(int) (mcVersion / 10000)}.${(int) (mcVersion / 100) % 100}" + (mcVersion % 100 == 0 ? '' : ".${mcVersion % 100}")

preprocess {
    vars.put("MC", mcVersion)
}

version = projectVersion
group = "dev.salmon"
archivesBaseName = projectName

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(8)
}

compileJava.options.encoding = 'UTF-8'

blossom {
    replaceToken("@VERSION@", projectVersion)
    replaceToken("@NAME@", projectName)
    replaceToken("@ID@", projectId)
}

loom {
    launchConfigs {
        client {
            if (mcVersionStr == "1.8.9") {
                arg("--tweakClass", "cc.woverflow.onecore.tweaker.OneCoreTweaker")
            } else {
                arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            }
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:$minecraftVersion")
    mappings("de.oceanlabs.mcp:$mappingsVersion")
    forge("net.minecraftforge:forge:$forgeVersion")

    compileOnly "gg.essential:essential-${mcVersionStr}-forge:1933"
    if (minecraftVersion == "1.8.9") {
        compileOnly 'cc.woverflow:onecore:1.3.3'
        include ('cc.woverflow:onecore-tweaker:1.3.0') {
            transitive = false
        }
    } else {
        include "gg.essential:loader-launchwrapper:1.1.3"
    }

    compileOnly 'org.spongepowered:mixin:0.8.4-SNAPSHOT'
}

processResources {
    inputs.property("version", projectVersion)
    inputs.property("mcversion", mcVersion)
    inputs.property("name", projectName)
    inputs.property("id", projectId)

    filesMatching("mcmod.info") {
        expand(
                "id": projectId,
                "name": projectName,
                "version": projectVersion,
                "mcversion": mcVersion
        )
    }

    filesMatching("mixins.${projectId}.json") {
        expand(
                "id": projectId
        )
    }
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

jar {
    dependsOn configurations.include
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'TweakClass': (minecraftVersion == "1.8.9" ? 'cc.woverflow.onecore.tweaker.OneCoreTweaker' : 'gg.essential.loader.stage0.EssentialSetupTweaker'),
            'MixinConfigs': "mixins.${projectId}.json",
            "TweakOrder": "0"
    )
}